% Matlab code implementation attempt of Astrom 1995

% Input which test case to see
clear
example =input('Example 1,2,4 or 0:  ');

switch example
    case 0
        A = input('A:\n');
        B = input('B:\n');
        C = input('C:\n');
    case 1
        % Example 1
        A = [-1 1 0; 0 -1 1; 0 0 -1];
        B = [0 ; 0 ; 1 ];
        C = [1 0 0];
    case 2
        % Example 2
        A = [0 1 1; 0 -1 6; 0 0 -1];
        B = [1; 6; 6];
        C = [1 0 0 ];
    case 3
        disp('No state space matrices were given for Example 3')
        return
    case 4
        % Example 4
        A = [0 1; -1 0];
        B = [0;1];
        C = [11 0];
        
end

% Relay characteristics
epsilon = 0;
d = 1;

% Samples that are evaluated
h_max = 40;
N = h_max*10; % any dips that are within a step of h_max/N are missed
h_data = linspace(0,h_max,N);

% Set up function handle 
f = @(x)eqtn2_3(x,A,B,C) - epsilon/d;

% Evaluate equation2_3 and find where sign changes (indicating root)
j = 2;
error_check = 0;
display('Evaluating f(h) for a wide range')
for i = 1:N
    f_data(i) = f(h_data(i));
    if i>1
        if f_data(i)*f_data(i-1)<0
            h_pos(j)= h_data(i);
            h_pos(j-1) = h_data(i-1);
            j = j+2;
            error_check = 1;
        end
    end
end



% Bisection to get a more accurate value of h
if error_check
    iter_max = 8;
    for k = 1:0.5*max(size(h_pos))
        iterations = 1;
        m = 2*k - 1;
        h_lower = h_pos(m);
        h_upper = h_pos(1+m);
        h_middle = 0.5*(h_lower+h_upper);

        display('Bisecting')
        while iterations<=iter_max
            if f(h_middle)*f(h_upper) < 0 
                h_lower = h_middle;
                h_middle = 0.5*(h_lower+h_upper);

            else 
                h_upper = h_middle;
                h_middle = 0.5*(h_lower+h_upper);

            end
            iterations = iterations +1;
        end
        h(k) = h_middle;
    end
    
    display('Solutions found at')
    h
else
    fprintf('No sign changes found! \nHave a look at the plot \n')
    % Plot results
    plot(h_data,f_data)
    I(1) = xlabel('$h$');
    I(2) = ylabel('$f(h) - \epsilon/d$');
    I(3) = legend('$f(h)- \epsilon/d$');
    grid on
    set(I, 'Interpreter','Latex')
end



    

    

        











